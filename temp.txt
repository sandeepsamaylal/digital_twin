app = Application(name="simple_joint_control_ur_hardware", modules=["sight"])
app = Application(name="simple_joint_control_lqr_ur10_sim")


if GENERATION == "e-series":    
    app.load(filename="packages/universal_robots/ur_robot_driver/apps/ur_eseries_robot.subgraph.json", prefix="ur")
elif GENERATION == "cb3":
    app.load(filename="packages/universal_robots/ur_robot_driver/apps/ur_cb3_robot.subgraph.json", prefix="ur")
else:
    Exception("Unknown robot generation")

app.load(filename="packages/planner/apps/multi_joint_lqr_control.subgraph.json", prefix="lqr")
app.load(filename="packages/navsim/apps/navsim_tcp.subgraph.json", prefix="simulation")
    
# Load components for configuration
ur_interface = app.nodes["ur.subgraph"]["interface"]
ur_controller = app.nodes["ur.controller"]["ScaledMultiJointController"]
ur_driver = app.nodes["ur.universal_robots"]["UniversalRobots"]

simulation_node = app.nodes["simulation.interface"]
lqr_interface = app.nodes["lqr.subgraph"]["interface"]

# configs
ur_controller.config.control_mode = "joint speed"
ur_driver.config.control_mode = "joint speed"
ur_driver.config.robot_ip = IP
ur_driver.config.headless_mode = False

app.nodes["lqr.kinematic_tree"]["KinematicTree"].config.kinematic_file = kinematic_file
lqr_planner = app.nodes["lqr.local_plan"]["MultiJointLqrPlanner"]
lqr_planner.config.speed_min = [-1.0] * len(joints)
lqr_planner.config.speed_max = [1.0] * len(joints)
lqr_planner.config.acceleration_min = [-1.0] * len(joints)
lqr_planner.config.acceleration_max = [1.0] * len(joints)

# add pycodelet for joint position control
widget_node = app.add("command_generator")
joint_commander = widget_node.add(JointPositionControl)
joint_commander.config.joints = joints
joint_commander.config.limits = [[-2*np.pi, 2*np.pi]] * len(joints)
joint_commander.config.measure = 'position'

# edges
app.connect(joint_commander, "command", ur_interface, "joint_target")
app.connect(ur_interface, "arm_state", joint_commander, "state")

app.connect(simulation_node["output"], "joint_state", lqr_interface, "joint_state")
app.connect(lqr_interface, "joint_command", simulation_node["input"], "joint_position")
